{"ts":1352608454079,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var https = require('https'),\n    querystring = require('querystring'),\n    Buffer = require('buffer').Buffer;\n\nvar API_SERVER = 'api.twilio.com';\nvar API_VERSION = '2010-04-01';\n\nfunction RestClient(sid, authToken) {\n    if(!(this instanceof RestClient)) {\n        return new RestClient(sid, authToken);\n    }\n\n    if(!sid) {\n        throw new Error('RestClient must be passed a SID');\n    }\n\n    if(!authToken) {\n        throw new Error('RestClient must be passed an authToken');\n    }\n\n    this.sid = sid;\n    this.authToken = authToken;\n    \n    this.basicAuth = (new Buffer(sid + ':' + authToken)).toString('base64');\n}\n\nmodule.exports = RestClient;\n\nRestClient.prototype.apiCall = function(method, path, options, suc, err, wholePath) {\n    var self = this;\n\n    method = method.toUpperCase();\n    options = options || {};\n    \n    var params = options.params,\n        headers = options.headers || {},\n        fullPath = '';\n\n    if(params) {\n        if(typeof params != 'string') {\n            params = querystring.stringify(params);\n        }\n    }\n\n    if(wholePath) {\n        fullPath = path;\n    } else {\n        fullPath = '/' + API_VERSION + '/Accounts/' + self.sid;\n        if(path.length > 0) {\n            if(path[0] != '/') {\n                fullPath += '/';\n            }\n            fullPath += path;\n        }\n        if(fullPath.substr(fullPath.length - 5) != '.json') {\n            fullPath += '.json';\n        }\n    }\n\n    if(params && method == 'POST') {\n        headers['Content-Length'] = params.length;\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    } else if(params && method == 'GET') {\n        fullPath += '?' + params;\n    }\n\n    headers.Host = API_SERVER;\n    headers.Authorization = \"Basic \" + self.basicAuth;\n\n    var request = https.request({ host: API_SERVER, port: 443, method: method, path: fullPath, headers: headers }, function(response) {\n       var responseChunks = [];\n       response.setEncoding('utf8');\n\n       response.on('data', function(chunk) {\n           responseChunks.push(chunk);\n       });\n\n       response.on('end', function() {\n           var body = responseChunks.join('');\n           \n           // Try to deserialize if possible\n           try {\n               body = JSON.parse(body);\n           } catch(err) {\n               // Do nothing. Probably wasn't JSON. We'll just return the string.\n           }\n           typeof suc == 'function' && suc(body);\n       });\n\n       if(typeof err == 'function') {\n           response.on('error', err);\n       }\n    });\n\n    if(params && method == 'POST') {\n       request.write(params);\n    }\n    request.end();\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- Accounts\n//-----------------------------------------------------------------------------\n\n/**\n * getAccountInfo: Request your account information\n */\nRestClient.prototype.getAccountInfo = function(suc, err) {\n    this.apiCall('GET', '', null, suc, err);\n};\n\n/**\n * updateAccountInfo: Update your account information\n *\n * @param {Map} params: Map of information to update. Currently, only\n * FriendlyName is supported.\n */\nRestClient.prototype.updateAccountInfo = function(params, suc, err) {\n    this.apiCall('POST', '', {params: params}, suc, err);\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- Available Phone Numbers\n//-----------------------------------------------------------------------------\n\n// Country can be either 'CA' or 'US' (until Twilio gets more areas serviced)\n// Possible filters: AreaCode, Contains, InRegion, InPostalCode, NearLatLong,\n// InLata, InRateCenter, Distance\nRestClient.prototype.getAvailableLocalNumbers = function(country, filters, suc, err) {\n    if(!country) {\n        throw new Error('Country argument required');\n    }\n    this.apiCall('GET', '/AvailablePhoneNumbers/' + country + '/Local',\n                 {params: filters}, suc, err);\n};\n\n// Country can be either 'CA' or 'US'\n// Possible filters: Contains\nRestClient.prototype.getAvailableTollFreeNumbers = function(country, filters, suc, err) {\n    if(!country) {\n        throw new Error('Country argument required');\n    }\n    this.apiCall('GET', '/AvailablePhoneNumbers/' + country + '/Local',\n                 {params: filters}, suc, err);\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- Outgoing Caller Ids \n//-----------------------------------------------------------------------------\n\nRestClient.prototype.getOutgoingCallerId = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Outgoing SID argument required');\n    }\n    this.apiCall('GET', '/OutgoingCallerIds/' + sid, null, suc, err);\n};\n\nRestClient.prototype.updateOutgoingCallerId = function(sid, params, suc, err) {\n    if(!sid) {\n        throw new Error('Outgoing SID argument required');\n    }\n    this.apiCall('POST', '/OutgoingCallerIds/' + sid, null, suc, err);\n};\n\nRestClient.prototype.deleteOutgoingCallerId = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Outgoing SID argument required');\n    }\n    this.apiCall('DELETE', '/OutgoingCallerIds/' + sid, null, suc, err);\n};\n\n// Possible filters: PhoneNumber, FriendlyName\nRestClient.prototype.getOutgoingCallerIdList = function(filters, suc, err) {\n    this.apiCall('GET', '/OutgoingCallerIds', {params: filters}, suc, err);\n};\n\n// Add an outgoing caller ID. This will cause Twilio to call the specified\n// number to verify it. CallDelay specifies a delay (<=60) for the call.\n// Possible params: FriendlyName, CallDelay\nRestClient.prototype.addOutgoingCallerId = function(num, params, suc, err) {\n    if(!num) {\n        throw new Error('Phone number argument required');\n    }\n    params = params || {};\n    params.PhoneNumber = num;\n    \n    this.apiCall('POST', '/OutgoingCallerIds', {params: params}, suc, err);\n};\n\n\n//-----------------------------------------------------------------------------\n//--------------------- Incoming Phone Numbers\n//-----------------------------------------------------------------------------\n\n// Possible filters: PhoneNumber, FriendlyName\nRestClient.prototype.getIncomingNumbers = function(filters, suc, err) {\n    this.apiCall('GET', '/IncomingPhoneNumbers', {params: filters}, suc, err);\n};\n\nRestClient.prototype.getIncomingNumber = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n    this.apiCall('GET', '/IncomingPhoneNumbers/' + sid, null, suc, err);\n};\n\nRestClient.prototype.updateIncomingNumber = function(sid, params, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n    this.apiCall('POST', '/IncomingPhoneNumbers/' + sid, {params: params}, suc, err);\n};\n\nRestClient.prototype.deleteIncomingNumber = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n    this.apiCall('DELETE', '/IncomingPhoneNumbers/' + sid, null, suc, err);\n};\n\n// Possible optional params: FriendlyName, VoiceUrl, VoiceMethod, VoiceFallbackUrl,\n// StatusCallback, StatusCallbackMethod, SmsUrl, SmsMethod, SmsFallbackUrl, \n// SmsFallbackMethod, VoiceCallerIdLookup\nRestClient.prototype.provisionIncomingNumber = function(num, areaCode, params, suc, err) {\n    params = params || {};\n    params.PhoneNumber = num;\n    params.AreaCode = areaCode;\n    this.apiCall('POST', '/IncomingPhoneNumbers', {params: params}, suc, err);\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- Calls\n//-----------------------------------------------------------------------------\n\n/**\n * getCallList: Request a list of call instance resources\n *\n * @param {Map} filters: An optional map of possible filters. See:\n * http://www.twilio.com/docs/api/2010-04-01/rest/call\n */\nRestClient.prototype.getCallList = function(filters, suc, err) {\n    this.apiCall('GET', '/Calls', null, suc, err);\n};\n\n/**\n * getCallInstance: Request a call instance resource\n *\n * @param {String} sid: The sid of the call to fetch\n */\nRestClient.prototype.getCallInstance = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n    \n    this.apiCall('GET', '/Calls/' + sid, {params: filters}, suc, err);\n};\n\n/**\n * makeCall: Place a call\n *\n * @param {String} from: The number the call is originating from. Must be a\n * Twilio number of a valid outgoing caller ID for your account, in E.164\n * format (i.e., +18674451795)\n * @param {String} to: The number of the callee. Same format as from.\n * @param {String} url: The callback URL that Twilio will request when the\n * call is picked up.\n * @param {Map} opts: A map of optional parameters. See:\n * http://www.twilio.com/docs/api/2010-04-01/rest/making_calls\n */\nRestClient.prototype.makeOutgoingCall = function(from, to, url, opts, suc, err) {\n    if(!from || !to || !url) {\n        throw new Error('From, to, and URL arguments required');\n    }\n    \n    opts = opts || {};\n    opts.Url = url;\n    opts.From = from;\n    opts.To = to;\n\n    this.apiCall('POST', '/Calls', {params: opts}, suc, err);\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- SMS \n//-----------------------------------------------------------------------------\n\n/**\n * getSmsInstance: Request an SMS instance resource\n *\n * @param {String} sid: The sid of the message to retrieve.\n */\nRestClient.prototype.getSmsInstance = function(messageSid, suc, err) {\n    this.apiCall('GET', '/SMS/Messages/' + messageSid, null, suc, err);\n};\n\n/**\n * getSmsList: Request a list of SMS instance resources\n *\n * @param {Map} filters: An optional map of filters. See:\n * http://www.twilio.com/docs/api/2010-04-01/rest/sms\n */\nRestClient.prototype.getSmsList = function(filters, suc, err) {\n    this.apiCall('GET', '/SMS/Messages', {params: filters}, suc, err);\n};\n\n/**\n * sendSms: Send a new SMS message\n *\n * @param {String} from: The outgoing callerId. Must be a valid twilio/outgoing\n * caller id number, in E.164 format (i.e., +18674451795)\n * @param {String} to: The number of the message target. Same format as from.\n * @param {String} body: The body of the SMS. Must be < 160 chars.\n * @param {String} uri: The optional status callback URI.\n */\nRestClient.prototype.sendSms = function(from, to, body, uri, suc, err) {\n    if(!from || !to || !body) {\n        throw new Error('From, To, and Body argument');\n    }\n    var params = {\n        From: from,\n        To: to,\n        Body: body\n    };\n    \n    if(uri) {\n        params.StatusCallback = uri;\n    }\n    this.apiCall('POST', '/SMS/Messages', {params: params}, suc, err);\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- Recordings\n//-----------------------------------------------------------------------------\n\n/**\n * getRecordingUri: Since recording requests always return the actual binary\n * data (either as Wav or MP3), we don't actually handle making this request.\n * That the recording URIs are public (i.e., they require no basic auth), this\n * means that a user can just go and GET the recording themselves, and do what\n * they will with the reply, which is the recording file itself.\n *\n * @param {String} sid: The sid of the recording to fetch.\n * @param {String} encoding: The encoding of the resultant file. May be either\n * 'mp3' or 'wav'. Default is 'mp3'.\n */\nRestClient.prototype.getRecordingUri = function(sid, encoding, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n    return 'https://' + API_SERVER + '/' + API_VERSION + '/' \n        + self.sid + '/Recordings/' + sid;\n};\n\n/**\n * deleteRecording: Delete a recording.\n *\n * @param {String} sid: The sid of the recording to delete\n */\nRestClient.prototype.deleteRecording = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n\n    this.apiCall('DELETE', '/Recordings/' + sid, null, suc, err);\n};\n\n/**\n * getRecordingList: Request a list of all recordings associated with account\n *\n * @param {Map} filters: An optional map of filters. Possible filters are:\n * CallSid: The sid of the call that originated the recording\n * DateCreated: The date of the call that originated the recording\n * See: http://www.twilio.com/docs/api/2010-04-01/rest/recording\n */\nRestClient.prototype.getRecordingList = function(filters, suc, err) {\n    this.apiCall('GET', '/Recordings', {params: filters}, suc, err);\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- Transcriptions \n//-----------------------------------------------------------------------------\n\n/**\n * getTranscriptionList: Request a list of all transcriptions\n */\nRestClient.prototype.getTranscriptionList = function(suc, err) {\n    this.apiCall('GET', '/Transcriptions', null, suc, err);\n};\n\n/**\n * getTranscriptionInstance: Request a transcription instance resource\n *\n * @param {String} sid: The transcription sid.\n */\nRestClient.prototype.getTranscriptionInstance = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n\n    this.apiCall('GET', '/Transcriptions/' + sid, null, suc, err);\n};\n\n/**\n * getTranscriptionText: Request only the text of a transcription\n *\n * @param {String} sid: The transcription sid.\n */\nRestClient.prototype.getTranscriptionText = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n\n    this.apiCall('GET', '/Transcriptions/' + sid + '.txt', null, suc, err);\n};\n\n//-----------------------------------------------------------------------------\n//--------------------- Notifications\n//-----------------------------------------------------------------------------\n\n/**\n * getNotificationList: Get a list of notifications assicated with this account\n *\n * @param {Map} filters: An optional list of filters.\n * See: http://www.twilio.com/docs/api/2010-04-01/rest/notification\n */\nRestClient.prototype.getNotificationList = function(filters, suc, err) {\n    this.apiCall('GET', '/Notifications', null, suc, err);\n};\n\n/**\n * getNotificationInstance: Get a notification instance resource\n *\n * @param {sid}: The sid of the notification.\n */\nRestClient.prototype.getNotificationInstance = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n\n    this.apiCall('GET', '/Notifications/' + sid, null, suc, err);\n};\n\n/**\n * deleteNotification: Delete a notification associated with this account\n *\n * @param {String} sid: The sid of the notification to delete.\n */\nRestClient.prototype.deleteNotification = function(sid, suc, err) {\n    if(!sid) {\n        throw new Error('Sid argument required');\n    }\n\n    this.apiCall('DELETE', '/Notifications/' + sid, null, suc, err);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":14892}]],"length":14892}
