{"ts":1352650500855,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var RestClient = require('./rest-client'),\n    Twiml = require('./twiml'),\n    AutoUri = require('./auto-uri').AutoUri,\n    EventEmitter = require('events').EventEmitter,\n    util = require('util');\n\nfunction Client(sid, authToken, hostname, opts) {\n    if(!(this instanceof Client)) {\n        return new Client(sid, authToken, hostname, opts);\n    }\n\n    if(!sid || !authToken || !hostname) {\n        throw new Error('sid, authToken, and hostname are required');\n    }\n\n    // This is a global so that Twiml can access it as well.\n    // Probably a better class structure would eliminate this.\n    autoUri = new AutoUri(hostname, opts);\n    RestClient.call(this, sid, authToken);\n};\n\nutil.inherits(Client, RestClient);\nmodule.exports = Client;\n\n/**\n * getPhoneNumber: Return a new PhoneNumber object\n *\n * @param {String} num: The phone number or phone number sid.\n */\nClient.prototype.getPhoneNumber = function(num, opts) {\n    return new PhoneNumber(this, num, opts);\n};\n\n/**\n * PhoneNumber class: Represents an incoming phone number\n *\n * @param {Object} client: An instantiated RestClient object\n * @param {String} num: The phone number/phone number's sid\n */\nfunction PhoneNumber(client, num, opts) {\n    var self = this;\n    \n    if(!(this instanceof PhoneNumber)) {\n        return new PhoneNumber(client, num);\n    }\n\n    if(!client || !num) {\n        throw new Error('client and num arguments required');\n    }\n\n    EventEmitter.call(this);\n    \n    this.client = client;\n    this.attrs = {};\n    this.opts = opts || {};\n\n    if(num.match(/^PN/)) {\n        this.attrs.sid = num;\n    } else {\n        this.attrs.phoneNumber = num;\n    }\n    \n    function handleEvent(event) {\n        return function(req, res) {\n            var reqParams = req.body;\n            self.emit(event, reqParams, (new Twiml.Response(res)));\n        };\n    }\n\n    this.on('newListener', function(listener) {\n        var update = {};\n\n        if(listener == 'incomingSms') {\n            if(!self.attrs.capabilities.sms) {\n                throw new Error('Cannot add listener for incomingSms to this phone number. ' +\n                    'It does not support SMS.');\n            }\n\n            update.SmsUrl = autoUri.addCallback('POST', handleEvent('incomingSms'));\n        } else if(listener == 'incomingCall') {\n            if(!self.attrs.capabilities.voice) {\n                throw new Error('Cannot add listener for incomingCall to this phone number. ' +\n                    'It does not support voice.');\n            }\n\n            update.VoiceUrl = autoUri.addCallback('POST', handleEvent('incomingCall'));\n        } else if(listener == 'callStatus') {\n            if(!self.attrs.capabilities.voice) {\n                throw new Error('Cannot add listener for callStatus to this phone number. ' +\n                    'It does not support voice.');\n            }\n\n            update.StatusCallback = autoUri.addCallback('POST', handleEvent('callStatus'));\n        }\n\n        self.client.updateIncomingNumber(self.attrs.sid, update);\n    });\n};\n\nutil.inherits(PhoneNumber, EventEmitter);\n\n/**\n * getNumberDetails: Retrieve the details for this phone number\n *\n * @param {Function} fn: Callback for completion\n */\nPhoneNumber.prototype.getNumberDetails = function(fn) {\n    var self = this;\n\n    function populate(numberDetails) {\n        self.attrs.friendlyName = numberDetails.friendly_name;\n        self.attrs.phoneNumber = numberDetails.phone_number;\n        self.attrs.voiceUrl = numberDetails.voice_url;\n        self.attrs.voiceMethod = numberDetails.voice_method;\n        self.attrs.voiceFallbackUrl = numberDetails.voice_fallback_url;\n        self.attrs.voiceFallbackMethod = numberDetails.voice_fallback_method;\n        self.attrs.statusCallback = numberDetails.status_callback;\n        self.attrs.statusCallbackMethod = numberDetails.status_callback_method;\n        self.attrs.smsUrl = numberDetails.sms_url;\n        self.attrs.smsMethod = numberDetails.sms_method;\n        self.attrs.smsFallbackMethod = numberDetails.sms_fallback_method;\n        self.attrs.voiceCallerIdLookup = numberDetails.voice_caller_idlookup;\n        self.attrs.capabilities = numberDetails.capabilities;\n        self.attrs.sid = numberDetails.sid;\n\n        typeof fn == 'function' && fn();\n    }\n\n    if(self.sid) {\n        self.client.getIncomingNumber(self.sid, function(resp) {\n            populate(resp);\n        });\n    } else {\n        // Passed in an actual number, gotta look it up.\n        self.client.getIncomingNumbers({PhoneNumber: self.attrs.phoneNumber},\n            function(resp) {\n                var num = resp && resp.incoming_phone_numbers && \n                    resp.incoming_phone_numbers[0];\n                \n                if(!num) {\n                    throw new Error('Could not get number ' + \n                        self.attrs.phoneNumber);\n                }\n                \n                populate(num);\n            }\n        );\n    }\n};\n\n/**\n * setup: Configure the incoming number to start emitting events\n *\n * @param {Function} fn: Called on completion\n */\nPhoneNumber.prototype.setup = function(fn) {\n    var self = this;\n\n    function handleRequest(event) {\n        return function(req, res) {\n            var reqParams = req.body;\n            self.emit(event, reqParams, (new Twiml.Response(res)));\n        };\n    }\n\n    if(!self.attrs.capabilities) {\n        self.getNumberDetails(fn);\n    } else {\n        typeof fn == 'function' && fn();\n    }\n};\n\nfunction OutgoingCall(from, to, opts, restClient) {\n    // An outgoing call with emit: callAnswered, callEnded\n    this.rest = restClient;\n    this.from = from;\n    this.to = to;\n    this.opts = opts || {};\n\n    EventEmitter.call(this);\n};\n\nutil.inherits(OutgoingCall, EventEmitter);\n\nOutgoingCall.prototype.setup = function(fn) {\n    var self = this;\n\n    var answeredUri = autoUri.addCallback('POST', function(req, res) {\n        self.emit('answered', req.body, (new Twiml.Response(res)));\n    });\n    \n    var endedUri = autoUri.addCallback('POST', function(req, res) {\n        self.emit('ended', req.body, (new Twiml.Response(res)));\n    });\n    \n    this.opts.StatusCallback = endedUri;\n    this.opts.StatusCallbackMethod = 'POST';\n\n    this.rest.makeOutgoingCall(this.from, this.to, answeredUri, this.opts, function(res) {\n        self.callDetails = res;\n        fn(self);\n    });\n};\n\nPhoneNumber.prototype.makeCall = function(to, opts, fn) {\n    var call = new OutgoingCall(this.attrs.phoneNumber, to, opts, this.client);\n    call.setup(fn);\n};\n\nfunction OutgoingSms(from, to, body, opts, restClient) {\n    this.rest = restClient;\n    this.from = from;\n    this.to = to;\n    this.body = body;\n    this.opts = opts || {};\n\n    EventEmitter.call(this);\n};\n\nutil.inherits(OutgoingSms, EventEmitter);\n\nOutgoingSms.prototype.setup = function(fn) {\n    var self = this;\n\n    var statusUri = autoUri.addCallback('POST', function(req, res) {\n        self.emit('processed', req.body, (new Twiml.Response(res)));\n    });\n\n    this.opts.StatusCallback = statusUri;\n    this.rest.sendSms(this.from, this.to, this.body, statusUri, function(res) {\n        self.smsDetails = res;\n        fn(self);\n    });\n};\n\nPhoneNumber.prototype.sendSms = function(to, body, opts, fn) {\n    var sms = new OutgoingSms(this.attrs.phoneNumber, to, body, opts, this.client);\n    sms.setup(fn);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":7334}]],"length":7334}
